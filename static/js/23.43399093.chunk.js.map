{"version":3,"file":"static/js/23.43399093.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactsPage/ContactsForm/ContactsForm.styled.ts","components/ContactsPage/ContactsForm/ContactsForm.tsx","components/ContactsPage/ContactsList/ContactsListItem.styled.ts","components/ContactsPage/ContactsList/ContactsListItem.tsx","components/ContactsPage/ContactsList/ContactsList.tsx","components/ContactsPage/Filter/Filter.styled.ts","components/ContactsPage/Filter/Filter.tsx","components/ContactsPage/ContactsPage.styled.ts","components/ContactsPage/ContactsPage.tsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  padding-left: 3rem;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const Label = styled.label`\n  margin-top: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n  font-weight: 600;\n`;\n\nexport const Input = styled.input`\n  padding: 4px 10px;\n  border-radius: 5px;\n  border: none;\n  box-shadow: 0 0 1px 1px #69beea;\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Contact } from '../../../types/types';\nimport { useAppDispatch, useAppSelector } from '../../../redux/hooks/hooks';\nimport { Form, Input, Label } from './ContactsForm.styled';\nimport { addContact } from '../../../redux/contactsSlice/contactsThunks';\nimport { Button } from '@chakra-ui/react';\n\nconst ContactsForm = () => {\n  const contacts = useAppSelector(state => state.contacts.contacts);\n  const dispatch = useAppDispatch();\n\n  const [contactName, setContactName] = useState<string>('');\n  const [contactNumber, setContactNumber] = useState<string>('');\n\n  const onChangeInput: React.FormEventHandler<HTMLInputElement> = e => {\n    const { name, value } = e.target as HTMLInputElement;\n    if (name === 'name') {\n      setContactName(value);\n      return;\n    }\n    setContactNumber(value);\n  };\n\n  const onSubmitAddContact: React.FormEventHandler<HTMLFormElement> = e => {\n    e.preventDefault();\n\n    const existingNames = contacts.items.map(el => el.name);\n\n    if (existingNames.includes(contactName)) {\n      alert(`${contactName} is already in contacts.`);\n      return;\n    }\n\n    const newContact: Contact = {\n      id: nanoid(),\n      name: contactName,\n      number: contactNumber,\n    };\n    dispatch(addContact(newContact));\n    setContactName('');\n    setContactNumber('');\n  };\n\n  return (\n    <Form onSubmit={onSubmitAddContact}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={contactName}\n          onChange={onChangeInput}\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={contactNumber}\n          onChange={onChangeInput}\n        />\n      </Label>\n      <Button colorScheme=\"teal\" size=\"md\" type=\"submit\">\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default ContactsForm;\n","import styled from 'styled-components';\n\nexport const Li = styled.li`\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: minmax(12.5rem, max-content) 4rem;\n  justify-content: left;\n  align-items: center;\n  gap: 8px;\n`;\n","import { Button } from '@chakra-ui/react';\nimport { deleteContact } from '../../../redux/contactsSlice/contactsThunks';\nimport { useAppDispatch } from '../../../redux/hooks/hooks';\nimport { Contact } from '../../../types/types';\nimport { Li } from './ContactsListItem.styled';\n\ninterface ContactsListItemProps {\n  contact: Contact;\n}\n\nconst ContactsListItem = ({ contact }: ContactsListItemProps) => {\n  const dispatch = useAppDispatch();\n\n  const onClickDelete = (id: string) => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <Li>\n      <p>\n        {contact.name} {contact.number}\n      </p>\n      <Button\n        colorScheme=\"red\"\n        size=\"xs\"\n        type=\"button\"\n        onClick={() => onClickDelete(contact.id)}\n      >\n        Delete\n      </Button>\n    </Li>\n  );\n};\n\nexport default ContactsListItem;\n","import ContactsListItem from './ContactsListItem';\nimport styled from 'styled-components';\nimport { useAppSelector } from '../../../redux/hooks/hooks';\n\nconst Ul = styled.ul`\n  padding-left: 3rem;\n`;\n\nconst Warning = styled.p`\n  padding-left: 3rem;\n`;\n\nconst Loading = styled.p`\n  padding-left: 3rem;\n`;\n\n\nconst ContactsList = () => {\n  const { contacts, filter } = useAppSelector(state => state.contacts);\n  const {items, isLoading} = contacts\n\n  const filteredList = items.filter(contact => {\n    const normalizeName = contact.name.trim().toLowerCase();\n    const normalizeFilter = filter.trim().toLowerCase();\n    return normalizeName.includes(normalizeFilter);\n  });\n\n  if (isLoading) {\n    return <Loading>Loading...</Loading>\n  }\n\n  if (!filteredList.length) {\n    return <Warning>Contacts not found</Warning>;\n  }\n\n  return (\n    <Ul>\n      {filteredList.map(contact => (\n        <ContactsListItem key={contact.id} contact={contact} />\n      ))}\n    </Ul>\n  );\n};\n\nexport default ContactsList;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  margin-top: 10px;\n  margin-left: 3rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: start;\n  gap: 8px;\n  font-weight: 600;\n`;\n\nexport const Input = styled.input`\n  padding: 4px 10px;\n  border-radius: 5px;\n  border: none;\n  box-shadow: 0 0 1px 1px #69beea;\n`;\n","import { useAppDispatch, useAppSelector } from \"../../../redux/hooks/hooks\";\nimport { setFilter } from \"../../../redux/contactsSlice/contactsSlice\";\nimport { Input, Label } from \"./Filter.styled\";\n\n\nconst Filter = () => {\n  const filter = useAppSelector(state => state.contacts.filter)\n  const dispatch = useAppDispatch();\n\n  const onChangeInput: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    dispatch(setFilter(e.currentTarget.value))\n  }\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={onChangeInput} />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactsTitle = styled.h2`\n  margin-left: 3rem;\n  margin-top: 3rem;\n`;\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import { useEffect } from 'react';\nimport ContactsForm from './ContactsForm/ContactsForm';\nimport ContactsList from './ContactsList/ContactsList';\nimport Filter from './Filter/Filter';\nimport { ContactsTitle, Container } from './ContactsPage.styled';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks/hooks';\nimport { Navigate } from 'react-router-dom';\nimport { fetchContacts } from '../../redux/contactsSlice/contactsThunks';\n\nconst ContactsPage = () => {\n  const user = useAppSelector(state => state.auth.user);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, []);\n\n  if (!user) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <Container>\n      <ContactsForm />\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Filter />\n      <ContactsList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","styled","Label","Input","contacts","useAppSelector","state","dispatch","useAppDispatch","useState","contactName","setContactName","contactNumber","setContactNumber","onChangeInput","e","target","name","value","onSubmit","preventDefault","items","map","el","includes","alert","newContact","number","addContact","type","pattern","title","required","onChange","colorScheme","Li","contact","onClick","deleteContact","Ul","Warning","Loading","filter","isLoading","filteredList","normalizeName","trim","toLowerCase","normalizeFilter","length","setFilter","currentTarget","ContactsTitle","Container","user","auth","useEffect","fetchContacts","to"],"sourceRoot":""}